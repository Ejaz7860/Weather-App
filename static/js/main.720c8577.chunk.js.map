{"version":3,"sources":["Images/bg1.jpg","Caled.jsx","Card.jsx","Weather.jsx","App.js","reportWebVitals.js","index.js"],"names":["Caled","className","id","src","img1","alt","Card","temp","humidity","pressure","weathermood","name","speed","country","sunset","useState","weatherState","setWeatheState","useEffect","date","Date","timeStr","getHours","getMinutes","Weather","searchValue","setSearchValue","tempInfo","setTempInfo","getWeatherInfo","a","url","fetch","res","json","data","main","weather","wind","sys","console","log","type","placeholder","autoFocus","value","onChange","e","target","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAAe,MAA0B,gC,OC+B1BA,EA3BD,WACV,OACI,mCACI,sBAAKC,UAAU,WAAf,UACI,sBAAKA,UAAU,WAAf,UACI,sBAAKA,UAAU,OAAf,UACI,sBAAMC,GAAG,UAAT,iBADJ,IAEI,sBAAMA,GAAG,QAAT,mBACA,sBAAMA,GAAG,SAAT,gBAHJ,IAII,sBAAMA,GAAG,OAAT,qBAEJ,sBAAKD,UAAU,OAAf,UACI,sBAAMC,GAAG,OAAT,gBADJ,IAEI,sBAAMA,GAAG,UAAT,gBAFJ,IAGI,sBAAMA,GAAG,UAAT,gBACA,sBAAMA,GAAG,SAAT,sBAIR,qBAAKD,UAAU,cAAf,SACI,qBAAKE,IAAKC,EAAMC,IAAI,aC+DzBC,EArFF,SAAC,GAOK,IAPHC,EAOE,EAPFA,KACZC,EAMc,EANdA,SACAC,EAKc,EALdA,SACAC,EAIc,EAJdA,YACAC,EAGc,EAHdA,KACAC,EAEc,EAFdA,MACAC,EACc,EADdA,QACAC,EAAc,EAAdA,OACA,EAAuCC,mBAAS,IAAhD,mBAAOC,EAAP,KAAqBC,EAArB,KAEAC,qBAAU,WACN,GAAIR,EACA,OAAQA,GACJ,IAAK,SACDO,EAAe,iBACf,MACJ,IAAK,OACDA,EAAe,UACf,MACJ,IAAK,QACDA,EAAe,gBACf,MACJ,IAAK,OACDA,EAAe,WACf,MAEJ,QACIA,EAAe,mBAI5B,CAACP,IAGJ,IACIS,EAAO,IAAIC,KAAW,IADhBN,GAENO,EAAO,UAAMF,EAAKG,WAAX,YAAyBH,EAAKI,cACzC,OACI,qCACI,sBAAKtB,UAAU,cAAf,UACI,mBAAGA,UAAS,aAAQe,KACpB,+BAAKL,EAAL,KAAaE,KACb,+BAAKN,EAAL,aAIJ,sBAAKN,UAAU,OAAf,UAEI,sBAAKA,UAAU,SAAf,UACI,mBAAGA,UAAW,iBACd,gCACI,+BAAKoB,EAAL,SACA,8CAIR,sBAAKpB,UAAU,SAAf,UACI,mBAAGA,UAAW,mBACd,gCACI,6BAAKO,IACL,gDAIR,sBAAKP,UAAU,SAAf,UACI,mBAAGA,UAAW,eACd,gCACI,6BAAKQ,IACL,gDAIR,sBAAKR,UAAU,SAAf,UACI,mBAAGA,UAAU,sBACb,gCACI,6BAAKW,IACL,oDCCTY,EAzEC,WACd,MAAsCT,mBAAS,SAA/C,mBAAOU,EAAP,KAAoBC,EAApB,KACA,EAAgCX,mBAAS,IAAzC,mBAAOY,EAAP,KAAiBC,EAAjB,KAGMC,EAAc,uCAAG,oDAAAC,EAAA,sEAEfC,EAFe,4DAE4CN,EAF5C,iEAIHO,MAAMD,GAJH,cAIfE,EAJe,gBAKFA,EAAIC,OALF,OAKfC,EALe,SAOkBA,EAAKC,KAAlC7B,EAPW,EAOXA,KAAMC,EAPK,EAOLA,SAAUC,EAPL,EAOKA,SACVC,EAAgByB,EAAKE,QAAQ,GAAnCD,KACAzB,EAASwB,EAATxB,KACAC,EAAUuB,EAAKG,KAAf1B,MAVW,EAWSuB,EAAKI,IAAzB1B,EAXW,EAWXA,QAASC,EAXE,EAWFA,OAajBc,EAXyB,CACvBrB,OACAC,WACAC,WACAC,cACAC,OACAC,QACAC,UACAC,WArBiB,kDA0BnB0B,QAAQC,IAAR,MA1BmB,0DAAH,qDAkCpB,OAJAvB,qBAAU,WACRW,MACC,IAGD,mCACE,qBAAK5B,UAAU,YAAf,SACE,sBAAKA,UAAU,UAAf,UACE,sBAAKA,UAAU,UAAf,UACE,qBAAKA,UAAU,WAAf,SACE,iCACE,uBACEyC,KAAK,OACLC,YAAY,YACZC,WAAS,EACTC,MAAOpB,EACPvB,GAAG,SACH4C,SAAU,SAACC,GAAD,OAAOrB,EAAeqB,EAAEC,OAAOH,UAG3C,wBACE5C,UAAU,MACVyC,KAAK,SACLO,QAASpB,EAHX,SAIE,mBAAG5B,UAAU,wBAInB,cAAC,EAAD,eAAU0B,OAEZ,cAAC,EAAD,YC7DKuB,EARH,WACV,OACE,mCACA,cAAC,EAAD,OCOWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.720c8577.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/bg1.211afdd1.jpg\";","import React from 'react'\r\nimport img1 from './Images/bg1.jpg';\r\n\r\n\r\nconst Caled = () => {\r\n    return (\r\n        <>\r\n            <div className=\"calender\">\r\n                <div className=\"datetime\">\r\n                    <div className=\"date\">\r\n                        <span id=\"dayname\">Day</span>,\r\n                        <span id=\"month\">Month</span>\r\n                        <span id=\"daynum\">00</span>,\r\n                        <span id=\"year\">Year</span>\r\n                    </div>\r\n                    <div className=\"time\">\r\n                        <span id=\"hour\">00</span>:\r\n                        <span id=\"minutes\">00</span>:\r\n                        <span id=\"seconds\">00</span>\r\n                        <span id=\"period\">AM</span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"calenderImg\">\r\n                    <img src={img1} alt=\"\" />\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Caled\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nconst Card = ({ temp,\r\n    humidity,\r\n    pressure,\r\n    weathermood,\r\n    name,\r\n    speed,\r\n    country,\r\n    sunset, }) => {\r\n    const [weatherState, setWeatheState] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        if (weathermood) {\r\n            switch (weathermood) {\r\n                case \"Clouds\":\r\n                    setWeatheState(\"wi-day-cloudy\");\r\n                    break;\r\n                case \"Haze\":\r\n                    setWeatheState(\"wi-fog\");\r\n                    break;\r\n                case \"Clear\":\r\n                    setWeatheState(\"wi-day-sunny\");\r\n                    break;\r\n                case \"Mist\":\r\n                    setWeatheState(\"wi-dust\");\r\n                    break;\r\n\r\n                default:\r\n                    setWeatheState(\"wi-day-sunny\");\r\n                    break;\r\n            }\r\n        }\r\n    }, [weathermood]);\r\n\r\n    // converting the seconds into time\r\n    let sec = sunset;\r\n    let date = new Date(sec * 1000);\r\n    let timeStr = `${date.getHours()}:${date.getMinutes()}`;\r\n    return (\r\n        <>\r\n            <div className=\"description\">\r\n                <i className={`wi ${weatherState}`}></i>\r\n                <h2>{name}, {country}</h2>\r\n                <h4>{temp}&deg;</h4>\r\n            </div>\r\n\r\n\r\n            <div className=\"temp\">\r\n\r\n                <div className=\"sunset\">\r\n                    <i className={\"wi wi-sunset\"}></i>\r\n                    <div>\r\n                        <h6>{timeStr} PM</h6>\r\n                        <h6>Sunset</h6>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"sunset\">\r\n                    <i className={\"wi wi-humidity\"}></i>\r\n                    <div>\r\n                        <h6>{humidity}</h6>\r\n                        <h6>humidity</h6>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"sunset\">\r\n                    <i className={\"wi wi-rain\"}></i>\r\n                    <div>\r\n                        <h6>{pressure}</h6>\r\n                        <h6>Pressure</h6>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"sunset\">\r\n                    <i className=\"wi wi-strong-wind\"></i>\r\n                    <div>\r\n                        <h6>{speed}</h6>\r\n                        <h6>Speed</h6>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Card\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect} from 'react'\r\nimport Caled from './Caled'\r\nimport Card from './Card'\r\n\r\n\r\nconst Weather = () => {\r\n  const [searchValue, setSearchValue] = useState(\"Delhi\");\r\n  const [tempInfo, setTempInfo] = useState({});\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const getWeatherInfo = async () => {\r\n    try {\r\n      let url = `https://api.openweathermap.org/data/2.5/weather?q=${searchValue}&units=metric&appid=4f76a9c9e1c67facee1465e328153c3a`\r\n\r\n      let res = await fetch(url);\r\n      let data = await res.json();\r\n\r\n      const { temp, humidity, pressure } = data.main;\r\n      const { main: weathermood } = data.weather[0];\r\n      const { name } = data;\r\n      const { speed } = data.wind;\r\n      const { country, sunset } = data.sys;\r\n\r\n      const myNewWeatherInfo = {\r\n        temp,\r\n        humidity,\r\n        pressure,\r\n        weathermood,\r\n        name,\r\n        speed,\r\n        country,\r\n        sunset,\r\n      };\r\n\r\n      setTempInfo(myNewWeatherInfo);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getWeatherInfo();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <div className=\"weather\">\r\n          <div className=\"content\">\r\n            <div className=\"inputBox\">\r\n              <form>\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"search...\"\r\n                  autoFocus\r\n                  value={searchValue}\r\n                  id=\"search\"\r\n                  onChange={(e) => setSearchValue(e.target.value)}\r\n                />\r\n\r\n                <button\r\n                  className=\"btn\"\r\n                  type=\"button\"\r\n                  onClick={getWeatherInfo} >\r\n                  <i className=\"fa fa-search\"></i> \r\n                </button> \r\n              </form>\r\n            </div>\r\n            <Card {...tempInfo} />\r\n          </div>\r\n          <Caled />\r\n        </div>\r\n      </div>\r\n    </>\r\n\r\n  )\r\n}\r\n\r\nexport default Weather\r\n","import React from 'react'\nimport Weather from './Weather'\nconst App = () => {\n  return (\n    <>\n    <Weather/>\n    </>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}